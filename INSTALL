
$Id: INSTALL,v 1.7 2003/12/08 18:06:37 edavis Exp $

Installing the NetCDF server software and client library for DODS.

---------------------------------------------------------------------------

BUILDING THE SOFTWARE
REQUIREMENTS
NOTES

---------------------------------------------------------------------------

BUILDING THE SOFTWARE

1) Type `./configure' at the system prompt. On some systems you may have to
   type `sh configure.'

2a) Type `make' to build the three server programs

3a) Install the server components in DODS_ROOT/etc by running `make
    install.'

3b) To install the data server, use the new installServer shell script in the
    DODS_ROOT/etc.

3c) Optionally run the tests. The tests for this server take a significant
    amount of time to run but, unlike most of the automated tests bundled
    with DODS software, they do not require the DejaGNU package. To run the
    tests use `make check.' (You must first install the server.)

    In most cases you will need to supply extra information to configure to
    run the tests. You must tell configure where to install the test dataset
    and you must tell configure which URL to use to access the test dataset
    with the newly installed server. If you did not supply this information
    when you built the server, simply rerun configure supplying it. There is
    no need to rebuild the server. 

    To tell configure where to install the test dataset, use the option
    --with-data-file=FILE, where FILE is the intended full pathname of the
    test dataset. The test dataset's name is test.nc. For example, If your 
    web server is using /home/http/html/ as the document root directory, you
    would use `/home/http/html/test.nc' for FILE. You can put the test
    dataset in any directory your newly installed netCDF DODS server can
    access.

    To tell configure which URL to use to access, use the option
    --with-data-url=URL where URL is the full URL to the test dataset.

3d) Set the dods.rc file so that the server will know how to handle
    different types of files you are serving.

    The nph-dods dispatch script receives a request and dispatches it to the
    appropriate service program. The way it figures out what is the
    appropriate service program is to match the filename part of the URL it
    received with a set of patterns listed in a configuration file. Each line
    of the configuration file contains a pattern and the name of a "handler"
    to use for files that match that pattern.

    Here is the default configuration:

    .*\.(HDF|hdf)(.Z|.gz)*$ hdf
    .*\.(NC|nc|cdf|CDF)$ nc
    .*\.(mat|Mat|MAT)$ mat
    .*\.(dat|bin)$ ff
    .*\.(pvu)(.Z|.gz)*$ dsp
    .*\/test$ jg
    .*\/[^\.]+$ jg

    Each line consists of a regular expression pattern followed by an
    abbreviation like "jg" or "mat". Consider a URL like this:

    http://dods.org/cgi-bin/nph-dods/data/ctd.mat?temp  

    When the nph-dods script is executed, the "file name" part of the URL is
    /data/ctd.mat. Testing this against the default initialization file
    matches the third line, which indicates that the mat (Matlab) service
    programs are the ones to use to process this request. The request is then
    dispatched to the mat-dods (or mat-dds or mat-das) programs for
    processing.

    NOTE: The default configuration is set up so that files without
    extensions are handled by the JGOFS service programs. If this is not
    right for your installation, delete the last line shown above.

    "Regular expressions", advanced pattern-matching languages, are a
    powerful feature of Perl and many other computer programs. Powerful
    enough, in fact, to warrant at least one book about them (Mastering
    Regular Expressions by Jeffrey Friedl, O'Reilly, 1997). You can find a
    brief tutorial to regular expressions in the DODS bookshelf at
    http://www.unidata.ucar.edu/packages/dods/user/regex-html/. (For a
    complete reference online--not a particularly good place to learn about
    them for the first time--see
    http://www.perldoc.com/perl5.6/pod/perlre.html.

    Briefly, however, the above patterns test whether a filename is of the
    form file.ext.comp, where comp (if present) is Z or gz, and ext is one of
    several possible filename extensions that might indicate a specific
    storage API. If a file has no extension, it is assumed to be a JGOFS
    file.

    If these default rules will not work for your installation, you can
    rewrite them. For example, if all your files are HDF files, you could
    replace the default configuration file with one that looks like this:

    .* hdf

    The .* pattern matches all possible names, and indicates that whatever
    the name of the file sought, the HDF service programs are the ones to
    use.

    If you have a situation where all the files in a particular directory
    (whatever its extension) are to be handled by the DSP service programs,
    and all other files served are JGOFS files, try this:

    \/dsp_data\/.* dsp
    .* jg

    The rules are applied in order, and the first rule with a successful
    match returns the handler that will be applied. The above set of rules
    implies that everything in the dsp_data directory will be handled with
    the DSP service programs, and everything else will be handled with the
    JGOFS programs.

REQUIREMENTS

  o You need to have the DAP library, libcurl, libz and librx
    from the third-party packages installed before building this software.

NOTES

  o If the build fails because make reports that it does not know how to make
    a particular file, try runing `make depend' to rebuild the Makefile's
    dependencies.

  o For information about installing secure DODS servers, see the file
    SECURITY in DODS_ROOT.

  o If the build fails because the FORTRAN jackets cannot be built, try
    setting the environment variables FC and FCFLAGS. FC should give the name
    of a FORTRAN compiler and FCFLAGS should hold any options that need to be
    passed to the compiler.

  o If the build fails because make reports that it does not know how to make
    a particular file, try runing `make depend' to rebuild the Makefile's
    dependencies.

  o DEBUGGING AIDS

    - The DODS API includes the following debugging aids that may be of help
      to you in developing new DODS applications.

    - DBG: simple program instrumentation -- see the file debug.h in
      $DODS_ROOT/include for more information

    - DBG2: more elaborate program instrumentation -- by convention this is
      used for output that is half a page or more, while DEBUG is used for
      single line output.

    - dbnew: include -ldbnew and -lefence when linking. libdbnew.a contains
      overloaded versions of new, new[] delete and delete[]. It also contains
      code to `walk the malloc chain' and simple checks for out-of-bounds
      errors.

    - efence: a freely available bounds checker for dynamically allocated
      memory. When used with dbnew, efence must be set to 8-byte alignment.
      efence will find all over- or under-writes of dynamically allocated
      memory, but only works on some machines.

    - To build with program instrumentation use `--enable-debug=<level>'
      where <level> is 1 or 2.

    - By default, both debug and dbnew are *not* enabled. Thus, if you want
      to build a straight version of the libraries and test code, use
      `./configure'. If you want the extra features, use:

      ./configure --enable-dbnew --enable-debug=2
